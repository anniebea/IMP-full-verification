# Generated from C:/Users/anitr/OneDrive/Documents/__University/6sem/PVSUS/MD5/IMP-PARTIAL-CORRECTNESS-GEN\IMP_D.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,27,174,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,
        1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,
        1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,
        1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,3,15,115,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        3,16,126,8,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,
        1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,4,23,146,8,23,11,23,12,23,
        147,1,24,3,24,151,8,24,1,24,5,24,154,8,24,10,24,12,24,157,9,24,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,166,8,25,1,26,4,26,169,8,26,
        11,26,12,26,170,1,26,1,26,0,0,27,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
        19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,1,0,7,2,0,43,
        43,45,45,2,0,42,42,47,47,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,
        57,65,90,95,95,97,122,5,0,44,44,48,57,65,90,95,95,97,122,3,0,9,10,
        13,13,32,32,186,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
        0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
        0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
        0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
        0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
        0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,1,55,1,0,0,0,3,58,1,0,0,0,
        5,63,1,0,0,0,7,69,1,0,0,0,9,71,1,0,0,0,11,74,1,0,0,0,13,79,1,0,0,
        0,15,84,1,0,0,0,17,87,1,0,0,0,19,93,1,0,0,0,21,96,1,0,0,0,23,99,
        1,0,0,0,25,101,1,0,0,0,27,103,1,0,0,0,29,105,1,0,0,0,31,114,1,0,
        0,0,33,125,1,0,0,0,35,127,1,0,0,0,37,131,1,0,0,0,39,134,1,0,0,0,
        41,138,1,0,0,0,43,140,1,0,0,0,45,142,1,0,0,0,47,145,1,0,0,0,49,150,
        1,0,0,0,51,165,1,0,0,0,53,168,1,0,0,0,55,56,5,58,0,0,56,57,5,61,
        0,0,57,2,1,0,0,0,58,59,5,114,0,0,59,60,5,101,0,0,60,61,5,97,0,0,
        61,62,5,100,0,0,62,4,1,0,0,0,63,64,5,119,0,0,64,65,5,114,0,0,65,
        66,5,105,0,0,66,67,5,116,0,0,67,68,5,101,0,0,68,6,1,0,0,0,69,70,
        5,44,0,0,70,8,1,0,0,0,71,72,5,105,0,0,72,73,5,102,0,0,73,10,1,0,
        0,0,74,75,5,116,0,0,75,76,5,104,0,0,76,77,5,101,0,0,77,78,5,110,
        0,0,78,12,1,0,0,0,79,80,5,101,0,0,80,81,5,108,0,0,81,82,5,115,0,
        0,82,83,5,101,0,0,83,14,1,0,0,0,84,85,5,102,0,0,85,86,5,105,0,0,
        86,16,1,0,0,0,87,88,5,119,0,0,88,89,5,104,0,0,89,90,5,105,0,0,90,
        91,5,108,0,0,91,92,5,101,0,0,92,18,1,0,0,0,93,94,5,100,0,0,94,95,
        5,111,0,0,95,20,1,0,0,0,96,97,5,111,0,0,97,98,5,100,0,0,98,22,1,
        0,0,0,99,100,5,123,0,0,100,24,1,0,0,0,101,102,5,125,0,0,102,26,1,
        0,0,0,103,104,7,0,0,0,104,28,1,0,0,0,105,106,7,1,0,0,106,30,1,0,
        0,0,107,108,5,60,0,0,108,115,5,62,0,0,109,110,5,61,0,0,110,115,5,
        60,0,0,111,112,5,62,0,0,112,115,5,61,0,0,113,115,2,60,62,0,114,107,
        1,0,0,0,114,109,1,0,0,0,114,111,1,0,0,0,114,113,1,0,0,0,115,32,1,
        0,0,0,116,117,5,84,0,0,117,118,5,114,0,0,118,119,5,117,0,0,119,126,
        5,101,0,0,120,121,5,70,0,0,121,122,5,97,0,0,122,123,5,108,0,0,123,
        124,5,115,0,0,124,126,5,101,0,0,125,116,1,0,0,0,125,120,1,0,0,0,
        126,34,1,0,0,0,127,128,5,97,0,0,128,129,5,110,0,0,129,130,5,100,
        0,0,130,36,1,0,0,0,131,132,5,111,0,0,132,133,5,114,0,0,133,38,1,
        0,0,0,134,135,5,110,0,0,135,136,5,111,0,0,136,137,5,116,0,0,137,
        40,1,0,0,0,138,139,5,59,0,0,139,42,1,0,0,0,140,141,5,40,0,0,141,
        44,1,0,0,0,142,143,5,41,0,0,143,46,1,0,0,0,144,146,7,2,0,0,145,144,
        1,0,0,0,146,147,1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,148,48,1,
        0,0,0,149,151,7,3,0,0,150,149,1,0,0,0,151,155,1,0,0,0,152,154,7,
        4,0,0,153,152,1,0,0,0,154,157,1,0,0,0,155,153,1,0,0,0,155,156,1,
        0,0,0,156,50,1,0,0,0,157,155,1,0,0,0,158,166,7,5,0,0,159,166,3,43,
        21,0,160,166,3,45,22,0,161,166,3,31,15,0,162,166,3,35,17,0,163,166,
        3,37,18,0,164,166,3,39,19,0,165,158,1,0,0,0,165,159,1,0,0,0,165,
        160,1,0,0,0,165,161,1,0,0,0,165,162,1,0,0,0,165,163,1,0,0,0,165,
        164,1,0,0,0,166,52,1,0,0,0,167,169,7,6,0,0,168,167,1,0,0,0,169,170,
        1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,172,1,0,0,0,172,173,
        6,26,0,0,173,54,1,0,0,0,9,0,114,125,147,150,153,155,165,170,1,6,
        0,0
    ]

class IMP_DLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    WEAKOP = 14
    STRONGOP = 15
    RELATION = 16
    BOOL = 17
    CONJUNCTION = 18
    DISCJUNCTION = 19
    NOT = 20
    SEMICOLON = 21
    LPARENTHESIS = 22
    RPARENTHESIS = 23
    NUMBER = 24
    VARNAME = 25
    ANY = 26
    WS = 27

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "':='", "'read'", "'write'", "','", "'if'", "'then'", "'else'", 
            "'fi'", "'while'", "'do'", "'od'", "'{'", "'}'", "'and'", "'or'", 
            "'not'", "';'", "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "WEAKOP", "STRONGOP", "RELATION", "BOOL", "CONJUNCTION", "DISCJUNCTION", 
            "NOT", "SEMICOLON", "LPARENTHESIS", "RPARENTHESIS", "NUMBER", 
            "VARNAME", "ANY", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "WEAKOP", 
                  "STRONGOP", "RELATION", "BOOL", "CONJUNCTION", "DISCJUNCTION", 
                  "NOT", "SEMICOLON", "LPARENTHESIS", "RPARENTHESIS", "NUMBER", 
                  "VARNAME", "ANY", "WS" ]

    grammarFileName = "IMP_D.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


